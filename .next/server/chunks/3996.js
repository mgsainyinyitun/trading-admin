"use strict";exports.id=3996,exports.ids=[3996],exports.modules={63996:(e,t,r)=>{r.d(t,{aU:()=>eb,$j:()=>eR,VY:()=>ej,dk:()=>eN,aV:()=>eD,h_:()=>eh,fC:()=>ey,Dx:()=>ew,xz:()=>ex});var o=r(17577),n=r(93095),a=r(48051),i=r(82561),l=r(88957),s=r(52067),d=r(825),u=r(10441),c=r(83078),p=r(9815),f=r(45226),g=r(80699),m=r(58260),v=r(35664),y=r(34214),x=r(10326),h="Dialog",[D,j]=(0,n.b)(h),[b,R]=D(h),w=e=>{let{__scopeDialog:t,children:r,open:n,defaultOpen:a,onOpenChange:i,modal:d=!0}=e,u=o.useRef(null),c=o.useRef(null),[p=!1,f]=(0,s.T)({prop:n,defaultProp:a,onChange:i});return(0,x.jsx)(b,{scope:t,triggerRef:u,contentRef:c,contentId:(0,l.M)(),titleId:(0,l.M)(),descriptionId:(0,l.M)(),open:p,onOpenChange:f,onOpenToggle:o.useCallback(()=>f(e=>!e),[f]),modal:d,children:r})};w.displayName=h;var N="DialogTrigger",A=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(N,r),l=(0,a.e)(t,n.triggerRef);return(0,x.jsx)(f.WV.button,{type:"button","aria-haspopup":"dialog","aria-expanded":n.open,"aria-controls":n.contentId,"data-state":Y(n.open),...o,ref:l,onClick:(0,i.M)(e.onClick,n.onOpenToggle)})});A.displayName=N;var C="DialogPortal",[I,O]=D(C,{forceMount:void 0}),F=e=>{let{__scopeDialog:t,forceMount:r,children:n,container:a}=e,i=R(C,t);return(0,x.jsx)(I,{scope:t,forceMount:r,children:o.Children.map(n,e=>(0,x.jsx)(p.z,{present:r||i.open,children:(0,x.jsx)(c.h,{asChild:!0,container:a,children:e})}))})};F.displayName=C;var M="DialogOverlay",E=o.forwardRef((e,t)=>{let r=O(M,e.__scopeDialog),{forceMount:o=r.forceMount,...n}=e,a=R(M,e.__scopeDialog);return a.modal?(0,x.jsx)(p.z,{present:o||a.open,children:(0,x.jsx)(_,{...n,ref:t})}):null});E.displayName=M;var _=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(M,r);return(0,x.jsx)(m.Z,{as:y.g7,allowPinchZoom:!0,shards:[n.contentRef],children:(0,x.jsx)(f.WV.div,{"data-state":Y(n.open),...o,ref:t,style:{pointerEvents:"auto",...o.style}})})}),P="DialogContent",$=o.forwardRef((e,t)=>{let r=O(P,e.__scopeDialog),{forceMount:o=r.forceMount,...n}=e,a=R(P,e.__scopeDialog);return(0,x.jsx)(p.z,{present:o||a.open,children:a.modal?(0,x.jsx)(W,{...n,ref:t}):(0,x.jsx)(T,{...n,ref:t})})});$.displayName=P;var W=o.forwardRef((e,t)=>{let r=R(P,e.__scopeDialog),n=o.useRef(null),l=(0,a.e)(t,r.contentRef,n);return o.useEffect(()=>{let e=n.current;if(e)return(0,v.Ry)(e)},[]),(0,x.jsx)(V,{...e,ref:l,trapFocus:r.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:(0,i.M)(e.onCloseAutoFocus,e=>{e.preventDefault(),r.triggerRef.current?.focus()}),onPointerDownOutside:(0,i.M)(e.onPointerDownOutside,e=>{let t=e.detail.originalEvent,r=0===t.button&&!0===t.ctrlKey;(2===t.button||r)&&e.preventDefault()}),onFocusOutside:(0,i.M)(e.onFocusOutside,e=>e.preventDefault())})}),T=o.forwardRef((e,t)=>{let r=R(P,e.__scopeDialog),n=o.useRef(!1),a=o.useRef(!1);return(0,x.jsx)(V,{...e,ref:t,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:t=>{e.onCloseAutoFocus?.(t),t.defaultPrevented||(n.current||r.triggerRef.current?.focus(),t.preventDefault()),n.current=!1,a.current=!1},onInteractOutside:t=>{e.onInteractOutside?.(t),t.defaultPrevented||(n.current=!0,"pointerdown"!==t.detail.originalEvent.type||(a.current=!0));let o=t.target;r.triggerRef.current?.contains(o)&&t.preventDefault(),"focusin"===t.detail.originalEvent.type&&a.current&&t.preventDefault()}})}),V=o.forwardRef((e,t)=>{let{__scopeDialog:r,trapFocus:n,onOpenAutoFocus:i,onCloseAutoFocus:l,...s}=e,c=R(P,r),p=o.useRef(null),f=(0,a.e)(t,p);return(0,g.EW)(),(0,x.jsxs)(x.Fragment,{children:[(0,x.jsx)(u.M,{asChild:!0,loop:!0,trapped:n,onMountAutoFocus:i,onUnmountAutoFocus:l,children:(0,x.jsx)(d.XB,{role:"dialog",id:c.contentId,"aria-describedby":c.descriptionId,"aria-labelledby":c.titleId,"data-state":Y(c.open),...s,ref:f,onDismiss:()=>c.onOpenChange(!1)})}),(0,x.jsxs)(x.Fragment,{children:[(0,x.jsx)(X,{titleId:c.titleId}),(0,x.jsx)(G,{contentRef:p,descriptionId:c.descriptionId})]})]})}),k="DialogTitle",z=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(k,r);return(0,x.jsx)(f.WV.h2,{id:n.titleId,...o,ref:t})});z.displayName=k;var B="DialogDescription",S=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(B,r);return(0,x.jsx)(f.WV.p,{id:n.descriptionId,...o,ref:t})});S.displayName=B;var q="DialogClose",U=o.forwardRef((e,t)=>{let{__scopeDialog:r,...o}=e,n=R(q,r);return(0,x.jsx)(f.WV.button,{type:"button",...o,ref:t,onClick:(0,i.M)(e.onClick,()=>n.onOpenChange(!1))})});function Y(e){return e?"open":"closed"}U.displayName=q;var Z="DialogTitleWarning",[H,K]=(0,n.k)(Z,{contentName:P,titleName:k,docsSlug:"dialog"}),X=({titleId:e})=>{let t=K(Z),r=`\`${t.contentName}\` requires a \`${t.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${t.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${t.docsSlug}`;return o.useEffect(()=>{e&&!document.getElementById(e)&&console.error(r)},[r,e]),null},G=({contentRef:e,descriptionId:t})=>{let r=K("DialogDescriptionWarning"),n=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${r.contentName}}.`;return o.useEffect(()=>{let r=e.current?.getAttribute("aria-describedby");t&&r&&!document.getElementById(t)&&console.warn(n)},[n,e,t]),null},J="AlertDialog",[L,Q]=(0,n.b)(J,[j]),ee=j(),et=e=>{let{__scopeAlertDialog:t,...r}=e,o=ee(t);return(0,x.jsx)(w,{...o,...r,modal:!0})};et.displayName=J;var er=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,x.jsx)(A,{...n,...o,ref:t})});er.displayName="AlertDialogTrigger";var eo=e=>{let{__scopeAlertDialog:t,...r}=e,o=ee(t);return(0,x.jsx)(F,{...o,...r})};eo.displayName="AlertDialogPortal";var en=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,x.jsx)(E,{...n,...o,ref:t})});en.displayName="AlertDialogOverlay";var ea="AlertDialogContent",[ei,el]=L(ea),es=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,children:n,...l}=e,s=ee(r),d=o.useRef(null),u=(0,a.e)(t,d),c=o.useRef(null);return(0,x.jsx)(H,{contentName:ea,titleName:ed,docsSlug:"alert-dialog",children:(0,x.jsx)(ei,{scope:r,cancelRef:c,children:(0,x.jsxs)($,{role:"alertdialog",...s,...l,ref:u,onOpenAutoFocus:(0,i.M)(l.onOpenAutoFocus,e=>{e.preventDefault(),c.current?.focus({preventScroll:!0})}),onPointerDownOutside:e=>e.preventDefault(),onInteractOutside:e=>e.preventDefault(),children:[(0,x.jsx)(y.A4,{children:n}),(0,x.jsx)(ev,{contentRef:d})]})})})});es.displayName=ea;var ed="AlertDialogTitle",eu=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,x.jsx)(z,{...n,...o,ref:t})});eu.displayName=ed;var ec="AlertDialogDescription",ep=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,x.jsx)(S,{...n,...o,ref:t})});ep.displayName=ec;var ef=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,n=ee(r);return(0,x.jsx)(U,{...n,...o,ref:t})});ef.displayName="AlertDialogAction";var eg="AlertDialogCancel",em=o.forwardRef((e,t)=>{let{__scopeAlertDialog:r,...o}=e,{cancelRef:n}=el(eg,r),i=ee(r),l=(0,a.e)(t,n);return(0,x.jsx)(U,{...i,...o,ref:l})});em.displayName=eg;var ev=({contentRef:e})=>{let t=`\`${ea}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${ea}\` by passing a \`${ec}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${ea}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return o.useEffect(()=>{document.getElementById(e.current?.getAttribute("aria-describedby"))||console.warn(t)},[t,e]),null},ey=et,ex=er,eh=eo,eD=en,ej=es,eb=ef,eR=em,ew=eu,eN=ep}};