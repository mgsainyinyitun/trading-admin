generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  loginId   String   @unique @db.Char(8)
  email     String   @unique
  name      String?
  phone     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([loginId])
}

model Customer {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  name                 String
  phone                String?
  password             String
  active               Boolean   @default(true)
  isActivated          Boolean   @default(false)
  lastLoginTime        DateTime?
  socialSecurityNumber String?
  addresses            Address[]
  accounts             Account[]
  trades               Trade[]
  winRates             WinRate[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Account {
  id           Int           @id @default(autoincrement())
  accountNo    String        @unique
  balance      Decimal       @default(0) @db.Decimal(15, 2)
  currency     String        @default("USD")
  isActive     Boolean       @default(true)
  customerId   Int
  customer     Customer      @relation(fields: [customerId], references: [id])
  transactions Transaction[]
  trades       Trade[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([customerId])
  @@index([accountNo])
}

model Transaction {
  id               Int               @id @default(autoincrement())
  transactionId    String            @unique
  type             TransactionType
  amount           Decimal           @db.Decimal(15, 2)
  description      String?
  status           TransactionStatus @default(PENDING)
  accountId        Int
  account          Account           @relation(fields: [accountId], references: [id])
  transactionFiles TransactionFile[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([accountId])
  @@index([transactionId])
}

model TransactionFile {
  id            Int      @id @default(autoincrement())
  transactionId Int
  filePath      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model InvalidToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@index([expiresAt])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  type      String   @default("EMAIL_VERIFICATION")
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([email])
}

model Address {
  id            Int         @id @default(autoincrement())
  type          AddressType @default(PRIMARY)
  streetAddress String
  city          String
  state         String
  postalCode    String
  country       String      @default("United States")
  isDefault     Boolean     @default(false)
  customerId    Int
  customer      Customer    @relation(fields: [customerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([customerId])
  @@index([type])
}

model Trade {
  id            Int           @id @default(autoincrement())
  customerId    Int
  accountId     Int
  tradeType     TradingType // 'short' or 'long'
  period        Int // duration in seconds
  tradingStatus TradingStatus // Enum for trading status
  tradeQuantity Float // Quantity of the trade
  isSuccess     Boolean? // true if successful, false otherwise
  createdAt     DateTime      @default(now()) // Timestamp for creation
  updatedAt     DateTime      @updatedAt // Timestamp for last update

  customer Customer @relation(fields: [customerId], references: [id])
  account  Account  @relation(fields: [accountId], references: [id])
}

model WinRate {
  id         Int   @id @default(autoincrement())
  customerId Int
  winRate    Float @default(0.5)

  customer  Customer @relation(fields: [customerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TradingSetting {
  id          Int         @id @default(autoincrement())
  seconds     Int
  percentage  Float
  tradingType TradingType @default(SHORT)
  winRate     Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([seconds, tradingType])
}

// Enum for transaction types
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

// Enum for transaction statuses
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

// Enum for address types
enum AddressType {
  PRIMARY
  BILLING
  SHIPPING
}

// Enum for trading status
enum TradingStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TradingType {
  SHORT
  LONG
}
